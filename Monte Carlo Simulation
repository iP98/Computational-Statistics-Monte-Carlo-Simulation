import numpy as np
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
from sklearn.model_selection import train_test_split

# Parameters for the Monte Carlo simulation
n_simulations = 100  # Number of simulations
n_observations = 50  # Number of observations (n)
n_predictors = 100   # Number of predictors (p), to illustrate p >> n

# Initialize lists to store the results of each simulation
training_errors = []
validation_errors = []

# Monte Carlo Simulation
for sim in range(n_simulations):
    # Generate synthetic data
    X = np.random.randn(n_observations, n_predictors)  # Features
    true_beta = np.random.randn(n_predictors, 1)  # True coefficients
    noise = np.random.randn(n_observations, 1)  # Noise
    Y = X.dot(true_beta) + noise  # Outcome variable

    # Split the dataset into training and validation sets
    X_train, X_val, Y_train, Y_val = train_test_split(X, Y, test_size=0.2, random_state=sim)

    # Fit a linear model to the training data
    model = LinearRegression().fit(X_train, Y_train)

    # Predict on training and validation set
    Y_train_pred = model.predict(X_train)
    Y_val_pred = model.predict(X_val)

    # Calculate and record the mean squared error on training and validation sets
    train_mse = mean_squared_error(Y_train, Y_train_pred)
    val_mse = mean_squared_error(Y_val, Y_val_pred)

    training_errors.append(train_mse)
    validation_errors.append(val_mse)

# Calculate the average training and validation mean squared error across all simulations
avg_train_mse = np.mean(training_errors)
avg_val_mse = np.mean(validation_errors)

avg_train_mse, avg_val_mse
